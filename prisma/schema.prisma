// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
  comments  Comment[]
  likes     Like[]
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
  notifications         Notification[] @relation("userNotifications")
  notificationsCreated  Notification[] @relation("notificationCreator")

  friendshipsA          Friendship[] @relation("friendship_a")
  friendshipsB          Friendship[] @relation("friendship_b")
  friendshipsRequested  Friendship[] @relation("friendship_requester")
}

model Edition {
  id          String    @id @default(cuid())
  title       String?
  weekStart   DateTime  // Monday 00:00:00 in your canonical TZ, stored as UTC
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  posts       Post[]

  @@unique([weekStart])
  @@index([publishedAt])
}

enum PostStatus {
  DRAFT
  SUBMITTED
  PUBLISHED
  ARCHIVED
}

model Post {
  id          String     @id @default(cuid())
  title      String?
  authorId    String
  editionId   String?
  content     Json?     // TipTap Json
  image       String?
  status      PostStatus @default(DRAFT)
  version     Int        @default(1) // optimistic concurrency for autosave

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  edition     Edition?   @relation(fields: [editionId], references: [id], onDelete: SetNull)
  comments    Comment[]
  likes       Like[]
  notifications Notification[]
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

model Friendship {
  aId          String
  bId          String
  requesterId  String
  status       FriendshipStatus
  acceptedAt   DateTime?         // null until accepted
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  a            User @relation("friendship_a", fields: [aId], references: [id], onDelete: Cascade)
  b            User @relation("friendship_b", fields: [bId], references: [id], onDelete: Cascade)
  requester    User @relation("friendship_requester", fields: [requesterId], references: [id], onDelete: Cascade)

  @@id([aId, bId])
  @@index([requesterId])
}


model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
  @@unique([userId, postId])
}

model Follows {
  followerId String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId])
  @@id([followerId, followingId])
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  creatorId  String
  type       NotificationType
  read       Boolean  @default(false)
  postId     String?
  commentId  String?
  createdAt  DateTime @default(now())

  user       User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator    User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
